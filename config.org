#+title: Config
#+PROPERTY: header-args :tangle config.el

现在我用的主题是……

#+begin_src emacs-lisp
(setq doom-theme 'ef-melissa-dark)
#+end_src

* 启动
今日方知我是我：

#+begin_src emacs-lisp
(setq user-full-name "SouthFox"
      user-mail-address "master@southfox.me")
#+end_src

** 横幅
替换 =Doom Emacs= 的横幅，用一只狐狸！

#+begin_src emacs-lisp
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
  (let* ((banner
          '("                                                                   ,           "
            "                                                             _.-=;~ /_         "
            "                                                          _-~   '     ;.       "
            "                                                      _.-~     '   .-~-~`-._   "
            "                                                _.--~~:.             --.____88 "
            "                              ____.........--~~~. .' .  .        _..-------~~  "
            "                     _..--~~~~               .' .'             ,'              "
            "                 _.-~                        .       .     ` ,'                "
            "               .'                                    :.    ./                  "
            "             .:     ,/          `                   ::.   ,'                   "
            "           .:'     ,(            ;.                ::. ,-'                     "
            "          .'     ./'.`.     . . /:::._______.... _/:.o/                        "
            "         /     ./'. . .)  . _.,'               `88;?88|                        "
            "       ,'  . .,/'._,-~ /_.o8P'                  88P ?8b                        "
            "    _,'' . .,/',-~    d888P'                    88'  88|                       "
            " _.'~  . .,:oP'        ?88b              _..--- 88.--'8b.--..__                "
            ":     ...' 88o __,------.88o ...__..._.=~- .    `~~   `~~      ~-._ Fox! _.    "
            "`.;;;:='    ~~            ~~~                ~-    -       -   -               "))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))

;(unless (display-graphic-p) ; for some reason this messes up the graphical splash screen atm
  (setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn) ;)
#+end_src

* org-mode
将 =org-log-into-drawer= 设为 =t= 后，完成任务后的时间戳将会收起，
这样一些每天完成的任务就不会被相关时间戳占满。

#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/org/"
        org-image-actual-width '(400)
        org-link-search-must-match-exact-headline nil
        org-log-done 'time
        org-log-into-drawer t))

#+end_src

** org-capture
一些捕获模板和路径设置，但说实在自从用了 =org-roam= 那边这边就没怎么管了。

#+begin_src emacs-lisp
(setq org-agenda-files '("~/Sync/org/GTD/inbox.org"
                         "~/Sync/org/GTD/tickler.org"))

(after! org
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                               (file "~/Sync/org/GTD/inbox.org")
                               "* TODO %i%? \n SCHEDULED: %t")
                              ("T" "Tickler" entry
                               (file+headline "~/Sync/org/GTD/tickler.org" "Tickler")
                               "* %i%? \n %U"))))
#+end_src

** org-roam
主要是一些捕获模板设置，文件命名加上时间还是因为导出到数字花园时会放在一个文件夹里，
而为了避免重名。

#+begin_src emacs-lisp
(setq org-roam-directory "~/Sync/org/Note/org-roam")
(setq org-roam-capture-templates
      '(("m" "main" plain
	 "%?"
	 :if-new (file+head "main/%<%Y%m%d%H%M%S>-${slug}.org"
			    "#+title: ${title}\n#+date: %T\n#+hugo_auto_set_lastmod: t\n#+hugo_section: main\n")
	 :immediate-finish t
	 :unnarrowed t)
	("r" "references" plain "%?"
	 :if-new
	 (file+head "references/%<%Y%m%d%H%M%S>-${title}.org" "#+title: ${title}\n#+date: %T\n#+hugo_auto_set_lastmod: t\n#+hugo_section: references\n")
	 :immediate-finish t
	 :unnarrowed t)
	("a" "article" plain "%?"
	 :if-new
	 (file+head "articles/%<%Y%m%d%H%M%S>-${title}.org" "#+title: ${title}\n#+date: %T\n#+filetags: :article:\n#+hugo_auto_set_lastmod: t\n#+hugo_section: articles\n")
	 :immediate-finish t
	 :unnarrowed t)))

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :target (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n#+date: %T\n#+hugo_auto_set_lastmod: t\n#+hugo_section: daily\n"))))
#+end_src

*** Garden
数字花园，开始种植思想……

#+begin_src emacs-lisp
(defcustom org-roam-garden-file "~/Sync/org/GTD/garden.org"
  "The file used by roam garden."
  :group 'org-roam
  :type 'string)

(add-to-list 'org-agenda-files org-roam-garden-file)
#+end_src

#+begin_src emacs-lisp
(defun org-roam-garden-plant ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let* ((node (org-roam-node-at-point))
           (title (org-roam-node-title node))
           (file (org-roam-node-file node)))
      (org-set-property "GARDEN-STATE" "seedling")
      (org-roam-update-garden-file title file))
    (save-buffer)))

(defun org-roam-update-garden-file (heading file-path)
  (with-current-buffer (find-file-noselect org-roam-garden-file)
    (let ((buffer (current-buffer)))
      (if (org-find-exact-headline-in-buffer heading)
          (message "Plant exists, skip...")
        (goto-char (point-max))
        (insert (concat "* " heading "\n[[" file-path "]]"))
        (org-schedule nil (format "<%s 22:00 ++3d >" (format-time-string "%Y-%m-%d %u")))
        (save-buffer)))))
#+end_src

** org-roam-ui
非常酷炫的一个网页 =roam= 笔记查看，可惜如果能够只查看某个节点就好了，
数据量一大我怕打开会直接卡死。

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;         a hookable mode anymore, you're advised to pick something yourself
;         if you don't care about startup time, use
;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** org-fragtog
好像是 =latex= 相关的预览包……？

#+begin_src emacs-lisp
(use-package! org-fragtog
  :hook (org-mode . org-fragtog-mode))
#+end_src

** roam-publish
一些从世界各地拼出来的代码，还有一些自己单纯堆叠调用的函数，
我真该系统学学 =elisp= +1 。

#+begin_src emacs-lisp
(setq org-hugo-base-dir "~/Documents/roam-publish/")

(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (daviwil/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-export-all ()
  "Re-exports all Org-roam files to Hugo markdown."
  (interactive)
  (dolist (org-file (my/org-roam-list-notes-by-tag "publish"))
  ;(dolist (org-file (directory-files-recursively org-roam-directory "\.org$"))
    (with-current-buffer (find-file org-file)
        (org-hugo-export-wim-to-md))))

(defun my/org-roam-publish ()
  "Publish current file"
  (interactive)
  (org-roam-update-org-id-locations)
  (org-roam-set-keyword "filetags" ":publish:")
  (save-buffer)
  (org-hugo-export-wim-to-md)
  (async-shell-command (concat
                        "cd " org-hugo-base-dir
                        " && " "git add ."
                        (if (yes-or-no-p "Push now?")
                            (concat " && " "git commit -m '[post] new post'"
                                    " && " "git push"))) "*Messages*")
  (message "publish nwe post!"))

(defun my/org-roam-creat-node ()
  "creat node and add IS_NODE property"
  (interactive)
  (org-id-get-create)
  (org-set-tags ":NODE:")
  (save-buffer)
  (org-hugo-export-wim-to-md))
#+end_src

** ob-restclient
在代码块中发送 =HTTP= 请求，感觉十分利好一些 =api= 文档啊。

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((restclient . t)))
#+end_src
* 宏
** cond-let
终于知道为什么没人想写这个宏了，括号是真得多啊。

#+begin_src emacs-lisp
(defmacro cond-let (forms)
  (declare (debug t))
  (if forms
      `(let* ,(setq varlist (internal--build-bindings (caar forms)))
         (if-let ,(car (last varlist))
             ,(cadar forms)
           (cond-let ,(cdr ,@forms))))))
#+end_src

* 杂项
=cnfonts= 是一个可以分别设置中英文字体的 bk ，方便对其表格。

=word-wrap-by-category= 是中文优化，当一行有英文和中文时不折行。

#+begin_src emacs-lisp
(setq cnfonts-personal-fontnames
      '(()
        ()
        ("Noto Color Emoji")
        ()
        ()))
(cnfonts-mode 1)

(setq word-wrap-by-category t)

(setq doom-unicode-font (font-spec :family "Noto Color Emoji"))
(add-to-list 'default-frame-alist '(height . 35))
(add-to-list 'default-frame-alist '(width . 102))
#+end_src

** 彩虹括号
#+begin_src emacs-lisp
(add-hook 'python-mode-hook  #'rainbow-delimiters-mode)
(add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
#+end_src

** Shell
将使用的终端切换到 =zsh= 。

#+begin_src emacs-lisp
(setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 5000)
#+end_src

** TODO 派对鹦鹉
快捷键和词典，但说实在没用过这功能，毕竟这个包的重点当然是在动图上。

#+begin_src emacs-lisp
(parrot-mode 1)
(define-key evil-normal-state-map (kbd "[r") 'parrot-rotate-prev-word-at-point)
(define-key evil-normal-state-map (kbd "]r") 'parrot-rotate-next-word-at-point)

(setq parrot-rotate-dict
      '(
        (:rot ("yes" "no") :caps t :upcase t)
        (:rot ("&" "|"))
        (:rot ("begin" "end") :caps t :upcase t)
        (:rot ("enable" "disable") :caps t :upcase t)
        (:rot ("enter" "exit") :caps t :upcase t)
        (:rot ("forward" "backward") :caps t :upcase t)
        (:rot ("front" "rear" "back") :caps t :upcase t)
        (:rot ("get" "set") :caps t :upcase t)
        (:rot ("high" "low") :caps t :upcase t)
        (:rot ("in" "out") :caps t :upcase t)
        (:rot ("left" "right") :caps t :upcase t)
        (:rot ("min" "max") :caps t :upcase t)
        (:rot ("on" "off") :caps t :upcase t)
        (:rot ("start" "stop") :caps t :upcase t)
        (:rot ("true" "false") :caps t :upcase t)
        (:rot ("&&" "||"))
        (:rot ("==" "!="))
        (:rot ("if" "else" "elif"))
        (:rot ("ifdef" "ifndef"))
        ))

#+end_src

定义一个可以钩住多个 =hook= 的函数，我感觉我不学 =elisp= 的话真不行了啊……

#+begin_src emacs-lisp
(defun my-add-to-multiple-hooks (function hooks)
  (mapc (lambda (hook)
          (add-hook hook function))
        hooks))
#+end_src

之后将在完成一个番茄钟播放点赞动画，保存一个文件时播放 =emacs= 动画等等，
感觉真该学学 =elisp= 了啊，必须得重构这段了。

#+begin_src emacs-lisp
(defun my-parrot-thumbsup-play ()
  (parrot-set-parrot-type 'thumbsup)
  (parrot-start-animation))

(defun my-parrot-emacs-play ()
  (parrot-set-parrot-type 'emacs)
  (parrot-start-animation))

(defun my-parrot-rotating-play ()
  (parrot-set-parrot-type 'rotating)
  (parrot-start-animation))

(my-add-to-multiple-hooks
 'my-parrot-thumbsup-play
 '(org-after-todo-state-change-hook
   org-clock-in-hook
   org-timer-done-hook
   git-commit-post-finish-hook))

(my-add-to-multiple-hooks
 'my-parrot-emacs-play
 '(after-save-hook
   find-file-hook))

(my-add-to-multiple-hooks
 'my-parrot-rotating-play
 '(elfeed-search-mode-hook
   mu4e-main-mode-hook))
#+end_src

** 其它文件
存放一些 =token= 的秘密文件，应该注意不能随 =git= 上传或者同步。

#+begin_src emacs-lisp
(load! "secrets")
(load! "elisp/hy")
(setq-default custom-file (expand-file-name "secrets.el" doom-user-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

* 文献管理
** Citar
#+begin_src emacs-lisp
(setq bibtex-completion-pdf-field "File")
(setq bibtex-completion-bibliography '("~/Sync/Ebook/catalog.bib"))
(setq citar-bibliography '("~/Sync/Ebook/catalog.bib"))
#+end_src

* 工具
** SDCV
翻译包，词典要自己下，同时不要忘了安装 =stardict= 和 =sdcv= 这两个软件。

#+begin_src emacs-lisp
(setq sdcv-say-word-p t)
(setq   sdcv-dictionary-data-dir (expand-file-name "~/.stardict/dic/"))

(map! :leader :desc "sdvc" "z" #'sdcv-search-pointer+)
#+end_src

** Clippy
一些远古的回忆……

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("c h" . "Help info from Clippy")
       :desc "Clippy describes function under point" "f" #'clippy-describe-function
       :desc "Clippy describes variable under point" "v" #'clippy-describe-variable))
#+end_src

** Mastodon
使用 [[https://codeberg.org/martianh/mastodon.el][mastodon.el]] 在无所事事时快速打开 =Mastodon= 进行一个鱼的摸！

#+begin_src emacs-lisp :tangle no
(setq mastodon-instance-url "https://social.instance.org"
      mastodon-active-user "example_user")
#+end_src

然后设置按键绑定，现在的设置还有一些问题，主要是要在不干扰 =evil= 快捷键的
情况下塞入新的按键还是挺难的。

#+begin_src emacs-lisp
(map! :leader
      :prefix ("o")
      :desc "Mastodon"          "M" #'mastodon)

(map! :after mastodon
      :map mastodon-mode-map
      :n "[ [" #'mastodon-tl--goto-prev-toot
      :n "] ]" #'mastodon-tl--goto-next-toot
      :n "g k" #'mastodon-tl--previous-tab-item
      :n "g j" #'mastodon-tl--next-tab-item

      :n "q" #'kill-current-buffer
      :n "Q" #'kill-buffer-and-window

      ;;; timelines
      :n "#" #'mastodon-tl--get-tag-timeline
      :n "A" #'mastodon-profile--get-toot-author
      :n "F" #'mastodon-tl--get-federated-timeline
      :n "H" #'mastodon-tl--get-home-timeline
      :n "L" #'mastodon-tl--get-local-timeline
      :n "N" #'mastodon-notifications-get
      :n "O" #'mastodon-profile--my-profile
      :n "P" #'mastodon-profile--show-user
      :n "T" #'mastodon-tl--thread

      ;;; toot actions
      :n "K" #'mastodon-toot--bookmark-toot-toggle
      :n "R" #'mastodon-toot--toggle-boost
      :n "c" #'mastodon-tl--toggle-spoiler-text-in-toot
      :n "C" #'mastodon-toot--copy-toot-url
      :n "o" #'mastodon-url-lookup
      :n "d" #'mastodon-toot--delete-toot
      :n "D" #'mastodon-toot--delete-draft-toot
      :n "f" #'mastodon-toot--toggle-favourite
      :n "r" #'mastodon-toot--reply
      :n "u" #'mastodon-tl--update
      :n "v" #'mastodon-tl--poll-vote

      ;;; toot!
      :n "t" #'mastodon-toot

      ;;; mastodon additions
      :n "S"    #'mastodon-search--search-query
      :n "V F"  #'mastodon-profile--view-favourites
      :n "V B"  #'mastodon-profile--view-bookmarks
      :n "V L" #'mastodon-tl--view-list-timeline
      )
#+end_src

** Debuger
说来惭愧，其实没怎么用过，
或者说还需要调优才能追上 =VS code= 的使用体验。

#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-python-debugger 'debugpy))

(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)

#+end_src

** TODO Rime
一个文本编辑器也可以内置输入法呢……

#+begin_src emacs-lisp
(use-package! rime
  :custom
  (default-input-method "rime")
  :config
  (define-key rime-mode-map (kbd "C-i") 'rime-force-enable)
  (setq rime-show-candidate 'posframe)
  (setq rime-disable-predicates
        '(rime-predicate-evil-mode-p
          rime-predicate-after-alphabet-char-p
          rime-predicate-space-after-cc-p
          rime-predicate-current-uppercase-letter-p
          rime-predicate-punctuation-line-begin-p)))
#+end_src

- [ ] 优化中英文切换断言
- [ ] 如何在一些输入中自动切换到中文？例如 =org-roam=
- [ ] 改键，现在的 =C \= 确实有点折磨
** 力扣
一些语言需要保存文件才有 =lsp= 支持……我真得需要 =lsp=

#+begin_src emacs-lisp
(setq leetcode-save-solutions t)
(setq leetcode-directory "~/Documents/leetcode")
#+end_src

** Company
补全……离不开的东西。

#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t))
#+end_src

* 信息
更多信息请参考下面这篇文章：
[[https://liujiacai.net/blog/2021/03/05/emacs-love-mail-feed/][使用 Emacs 阅读邮件与 RSS - Keep Coding]]
** 邮件
#+begin_src emacs-lisp
(set-email-account! "southfox.me"
  '((mu4e-sent-folder       . "/Sent")
    (mu4e-drafts-folder     . "/southfox.me/Drafts")
    (mu4e-trash-folder      . "/southfox.me/Trash")
    (mu4e-refile-folder     . "/southfox.me/All Mail")
    (smtpmail-smtp-user     . "master@southfox.me")
    (mu4e-compose-signature . "---\nFor mu4e"))
  t)
#+end_src

** Rss
设置打开 =elfeed= 时同时刷新源，
所需源用专门的 =rss.org= 进行管理，
对于一些访问不佳的源还得设置 =curl= 参数进行代理。

#+begin_src emacs-lisp
(add-hook! 'elfeed-search-mode-hook 'elfeed-update)

(after! elfeed
  (setq elfeed-search-filter "@6-month-ago +unread")
  (setq rmh-elfeed-org-files '("~/Sync/org/rss.org"))
  (setq elfeed-curl-extra-arguments '("-H Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.7113.93 Safari/537.36"
                                      "--proxy" "socks5://127.0.0.1:10808"
                                      "--retry" "2"
                                      "--insecure")))
#+end_src

* Clojure
#+begin_src emacs-lisp
(use-package! flycheck-clj-kondo
  :after (clojure-mode))

(use-package! clj-refactor
  :after (clojure-mode))
#+end_src

** Paredit
#+begin_src emacs-lisp
(use-package! paredit
  :config
  (add-hook 'clojure-mode-hook 'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook 'enable-paredit-mode))
#+end_src

* Python
自动切换虚拟环境， poetry 包可能在处理远端机器的项目可能会有问题所以从那边抠出来放到这里。

#+begin_src emacs-lisp
(defvar poetry-venv-list '()
  "List of known poetry virtualenvs.")

(defun my/track-python-virtualenv (&optional _)
  (interactive)
  (when (and buffer-file-name
             (string= nil (file-remote-p default-directory)))
    (cond ((locate-dominating-file default-directory "pyproject.toml")
           (if-let ((poetry-current-project-venv (cdr (assq '(locate-dominating-file default-directory "pyproject.toml") poetry-venv-list))))
               (when (not (equal python-shell-virtualenv-path poetry-current-project-venv))
                 (pyvenv-activate poetry-current-project-venv))
             (let ((poetry-project-path (locate-dominating-file default-directory "pyproject.toml"))
                   (poetry-venv-path (s-trim (shell-command-to-string "env -u VIRTUAL_ENV poetry env info -p"))))
               (pyvenv-activate poetry-venv-path)
               (add-to-list 'poetry-venv-list (cons poetry-project-path poetry-venv-path)))))
          ((locate-dominating-file default-directory ".venv")
           (pyvenv-activate (concat (locate-dominating-file default-directory ".venv") ".venv")))
          (t (pyvenv-deactivate)))))

(add-to-list 'window-buffer-change-functions 'my/track-python-virtualenv)
#+end_src
